---
// Import statements and any page-specific logic
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import PostDescriptionExcerpt from '../components/PostDescriptionExcerpt.astro'
import PostExcerpt, {
  PropHeadings,
  PropRenderer,
} from '@igor.dvlpr/astro-post-excerpt'
import Greeting from '../components/Greeting';
const pageTitle = "Near Future Laboratory Back Office";
import Archive from '../components/Archive.astro'
import { getPostsByYear } from '../utils/getPostsByYears.js';

const postsByYear = await getPostsByYear();

// Fetching all posts
//const allPosts = await getCollection('blog');
const publishedBlogEntries = await getCollection('blog', ({ data }) => {
  return data.isDraft !== true;
});
// Sorting posts to get the latest post
const latestPost = publishedBlogEntries.sort((a, b) => new Date(b.data.pubDate) - new Date(a.data.pubDate))[0];
// const latestPostContent = await Astro.fetchContent(latestPost.url);
const { Content, headings } = await latestPost.render();
const allDigests = await getCollection('digest');
const latestDigest = allDigests.sort((a, b) => new Date(b.data.pubDate - new Date(a.data.pubDate)))[0];

// Function to extract the first 200 words
function extractFirstWords(text, limit) {
  return text.split(" ").slice(0, limit).join(" ") + '...';
}

import { z } from 'zod';

// Define the schema
const postSchema = z.object({
  title: z.string(),
  pubDate: z.date(),
  description: z.string().optional(),
  seo: z.string().default('Design Fiction'),
  author: z.string(),
  authorUsername: z.string().default('@nearfuturelab'),
  image: z.object({
    url: z.string().default('https://backoffice.nearfuturelaboratory.com/favicon.svg'),
    altText: z.string().default('Near Future Laboratory Design Fiction Imagine Harder')
  }).optional(),
  og_type: z.string().default('article'),
  tags: z.array(z.string()).optional(),
  isDraft: z.boolean().default(true),
  containsImage: z.boolean().optional(),
});

// Create a complete instance
const frontmatter = postSchema.parse({
  title: "Back Office at the Near Future Laboratory",
  pubDate: new Date('2024-01-01'),
  description: "Imagination leads to beautiful, unexpected possibilities. It's Time to Imagine Harder.",
  seo: "Design Fiction",
  author: "Julian Bleecker",
  authorUsername: "@darthjulian",
  // image: {
  //   url: "https://example.com/image.jpg",
  //   altText: "An image depicting future technology"
  // },
  og_type: "site",
  tags: ["Design Fiction", "Futures", "Design Innovation"],
  isDraft: false,
  containsImage: false,
});
---

<BaseLayout pageTitle={pageTitle} frontmatter={frontmatter}>
    <!-- Latest Post Excerpt -->
    <div class="posttitle pb-14" style="font-size: 2rem">Latest Post from the Back Office</div>
    <section>
      <div class="index-post-title-header"><a href={`/blog/${latestPost.slug}`}>{latestPost.data.title}</a>
      <div class="text-zinc-600 font-mono text-[0.75rem] pt-1">{latestPost.data.pubDate}</div>
      </div>
      <div class="index-post-content">
      <PostDescriptionExcerpt post={latestPost} words={50} addEllipsis={true} renderer={PropRenderer.Html}/>
      <span/>
      <a class="block mt-5 text-sm sm:text-sm md:text-base" href=`/blog/${latestPost.slug}`>Read more</a>

    </div>
      <!-- {extractFirstWords(latestPost.body, 50)} -->
    </section>
  
    <!-- Last 10 Posts -->
    <section style="background-color: #f0f0f0;">
      <!-- ... -->
    </section>
  
    <!-- Posts by Year -->
    <section class="mb-[100px]">
      <!-- ... -->
    </section>
  <Archive postsByYear={postsByYear}/>

</BaseLayout>


